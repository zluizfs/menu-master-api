generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_PRISMA_URL")
}

model AddressUser {
  user      User    @relation(fields: [userId], references: [userId])
  userId    Int
  address   Address @relation(fields: [addressId], references: [addressId])
  addressId Int

  @@id([userId, addressId])
}

model Address {
  addressId  Int           @id @default(autoincrement())
  street     String        @db.VarChar(100)
  number     Int
  city       String        @db.VarChar(150)
  state      String        @db.VarChar(2)
  landmark   String        @db.VarChar(50)
  complement String        @db.VarChar(50)
  users      AddressUser[]
  restaurant Restaurant[]
}

model User {
  userId      Int           @id @default(autoincrement())
  name        String        @db.VarChar(150)
  email       String        @unique @db.VarChar(254)
  password    String        @db.VarChar(250)
  phoneNumber String        @db.VarChar(11)
  createdAt   DateTime      @default(now())
  addresses   AddressUser[]
  order       Order[]
}

model Restaurant {
  restaurantId           Int                      @id @default(autoincrement())
  name                   String                   @db.VarChar(150)
  description            String                   @db.VarChar(250)
  imageUrl               String                   @db.VarChar(150)
  phoneNumber            String                   @db.VarChar(11)
  rating                 Float
  addressId              Int
  address                Address                  @relation(fields: [addressId], references: [addressId])
  restaurantOpeningHours RestaurantOpeningHours[]
  restaurantDisches      RestaurantDisches[]
  order                  Order[]
}

model RestaurantOpeningHours {
  restaurantOpeningHoursId Int        @default(autoincrement()) @db.TinyInt
  restaurantRestaurantId   Int
  restaurant               Restaurant @relation(fields: [restaurantRestaurantId], references: [restaurantId])

  @@id([restaurantOpeningHoursId, restaurantRestaurantId])
}

model DischesCategory {
  dischesCategoryId Int      @id @default(autoincrement()) @db.TinyInt
  description       String   @db.VarChar(50)
  dishes            Dishes[]
}

model Dishes {
  dishesId          Int                 @id @default(autoincrement())
  name              String              @db.VarChar(150)
  description       String              @db.VarChar(500)
  price             Decimal             @db.Decimal(15, 2)
  imageUrl          String              @db.VarChar(150)
  dischesCategoryId Int                 @db.TinyInt
  dischesCategory   DischesCategory     @relation(fields: [dischesCategoryId], references: [dischesCategoryId])
  restaurantDisches RestaurantDisches[]
  order             Order[]
}

model RestaurantDisches {
  restaurantId Int
  dishesId     Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  disches      Dishes     @relation(fields: [dishesId], references: [dishesId])

  @@id([dishesId, restaurantId])
}

model Order {
  orderId      Int        @default(autoincrement())
  restaurantId Int
  dishesId     Int
  userId       Int
  total        Decimal    @db.Decimal(15, 2)
  user         User       @relation(fields: [userId], references: [userId])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [restaurantId])
  disches      Dishes     @relation(fields: [dishesId], references: [dishesId])
  createdAt    DateTime   @default(now())

  @@id([orderId, restaurantId])
}
